package com.swann.SVLibrary.book;

import com.swann.SVLibrary.copy.Copy;
import com.swann.SVLibrary.copy.CopyRepository;

import org.bson.types.ObjectId;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class BookServiceTest {

    @Mock
    private BookRepository bookRepository;

    @Mock
    private CopyRepository copyRepository;

    @InjectMocks
    private BookService bookService;

    // Helper method to create a test book
    private Book mockBook() {
        Book book = new Book();
        book.setIsbn10("1234567890");
        return book;
    }

    @Test
    public void testFindAllBooks() {
        // Arrange
        Book book1 = new Book(new String(), "1234567890", "1234567890123", "Title1",
                Arrays.asList("Author1"), 200, Arrays.asList("Publisher1"),
                "2023-01-01", Arrays.asList("Place1"), Arrays.asList("Subject1"),
                Arrays.asList("PlaceSubject1"), Arrays.asList("Person1"), new Cover("urlSmall1", "urlMedium1", "urlLarge1"));

        Book book2 = new Book(new String(), "isbn10_2", "isbn13_2", "Title2",
                        Arrays.asList("Author2"), 300, Arrays.asList("Publisher2"),
                        "2023-02-01", Arrays.asList("Place2"), Arrays.asList("Subject2"),
                        Arrays.asList("PlaceSubject2"), Arrays.asList("Person2"), new Cover("urlSmall2", "urlMedium2", "urlLarge2"));

        when(bookRepository.findAll()).thenReturn(Arrays.asList(book1, book2));
        // Act
        List<Book> result = bookService.findAllBooks();
        // Assert
        assertEquals(2, result.size());
        assertEquals(book1, result.get(0));
        assertEquals(book2, result.get(1));
        // Verify that findAll() method is called once
        verify(bookRepository, times(1)).findAll();
    }

    @Test
    public void testFindAllBooksNoData() {
        // Arrange
        when(bookRepository.findAll()).thenReturn(Collections.emptyList());
        // Act
        List<Book> result = bookService.findAllBooks();
        // Assert
        assertTrue(result.isEmpty());
    }

    // This test doesn't make sense because the ObjectId of copy id is normally autogenerated by
    // MongoDB, so we can't mock it. Better to test with Postman.
    @Test
    public void testAddBookAndCopyToLibrary_Success() {
        // Arrange
        when(bookService.findBookByIsbn("1234567890")).thenReturn(Optional.empty());
        when(bookRepository.save(any(Book.class))).thenReturn(mockBook());
        when(copyRepository.save(any(Copy.class))).thenReturn(new Copy(null, true));
        // Act
        String copyId = bookService.addBookAndCopyToLibrary(mockBook());
        // Assert
        assertNull(copyId);
    }

    @Test
    public void testAddBookAndCopyToLibrary_InvalidIsbn10() {
        // Arrange
        Book book = new Book();
        book.setIsbn10("123456789"); // Invalid ISBN length
        // Act and Assert
        assertThrows(IllegalArgumentException.class, () -> bookService.addBookAndCopyToLibrary(book));
    }

    @Test
    public void testAddBookAndCopyToLibrary_DuplicateIsbn() {
        // Mock behavior to simulate that the ISBN is already registered
        Mockito.when(bookService.findBookByIsbn("1234567890")).thenReturn(Optional.of(mockBook()));
        // Invoke the method under test and expect a RuntimeException
        assertThrows(RuntimeException.class, () -> bookService.addBookAndCopyToLibrary(mockBook()));
        // Verify that bookRepository.save and copyRepository.save were not called
        Mockito.verify(bookRepository, Mockito.never()).save(Mockito.any(Book.class));
        Mockito.verify(copyRepository, Mockito.never()).save(Mockito.any(Copy.class));
    }
}